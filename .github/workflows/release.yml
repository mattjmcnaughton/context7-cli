name: Release

on:
  workflow_run:
    workflows: ["CI"]
    branches: [main]
    types: [completed]

permissions:
  contents: write
  issues: write
  pull-requests: write
  id-token: write

jobs:
  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "lts/*"

    - name: Install semantic-release
      run: npm install @semantic-release/exec @semantic-release/changelog @semantic-release/git semantic-release

    - name: Release
      id: semantic
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: npx semantic-release

  build-binaries:
    name: Build ${{ matrix.target }}
    needs: release
    if: needs.release.outputs.new_release_published == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: context7-cli
            asset_name: context7-cli-linux-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: context7-cli
            asset_name: context7-cli-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: context7-cli
            asset_name: context7-cli-macos-aarch64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: v${{ needs.release.outputs.new_release_version }}

    # Using dtolnay/rust-toolchain action maintained by David Tolnay,
    # a trusted and prolific member of the Rust community (maintainer of serde, syn, and many other core crates)
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Build binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Prepare uncompressed binary
      run: |
        cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} ${{ matrix.asset_name }}

    - name: Compress binary
      run: |
        tar czf ${{ matrix.asset_name }}.tar.gz ${{ matrix.asset_name }}

    - name: Upload binaries to release
      # Using softprops/action-gh-release action maintained by softprops.
      # Most popular release package.
      uses: softprops/action-gh-release@v2.4.1
      with:
        tag_name: v${{ needs.release.outputs.new_release_version }}
        files: |
          ${{ matrix.asset_name }}
          ${{ matrix.asset_name }}.tar.gz
